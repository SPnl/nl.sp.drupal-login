<?php
/*  --------------------------------------------------------------------------
 * Aanpassingen aan de Drupal-loginprocedure voor SPnet
 * kevin@levity.nl, 2014-2015
 * -------------------------------------------------------------------------- */

/**
 * Implements hook_page_delivery_callback_alter.
 * Redirect naar /user als gebruiker niet ingelogd is en op een afgeschermde pagina komt.
 */
function splogin_page_delivery_callback_alter(&$callback, $set = false) {
    if($callback == 'drupal_deliver_html_page') {
        $callback = 'splogin_deliver_html_page';
    }
}

/**
 * Hierboven aangeroepen:
 * Redirect naar /user als gebruiker niet ingelogd is en op een afgeschermde pagina komt.
 */
function splogin_deliver_html_page($page_callback_result) {

    if(is_int($page_callback_result)) {
        switch ($page_callback_result) {

            case MENU_ACCESS_DENIED:
                if(!user_is_logged_in())
                    drupal_goto('user');
                break;

        }
    }

    return drupal_deliver_html_page($page_callback_result);
}

/**
 * Implements hook_user_login.
 * - Synchroniseer met Profile2-velden (vereist feature profile2_spnet)
 * - Redirect naar voorpagina ipv /user na login
 * @param $edit
 * @param $account
 */
function splogin_user_login(&$edit, $account) {

    _splogin_update_profile($account);

    if(!array_key_exists('destination', $_GET) &&
	    (!array_key_exists('form_id', $_REQUEST) || $_REQUEST['form_id'] != 'user_pass_reset')) {
        $_GET['destination'] = '';
    }
}

/**
 * Implements hook_menu.
 * - Custom-pagina /user/new waar gebruikers account kunnen maken
 * - Configuratiepagina om id's in te stellen voor integratie met Profile2
 * @return array Pages
 */
function splogin_menu() {
    return array(
        'user/new' => array(
            'title'           => 'Nieuw account aanmaken',
            'page callback'   => 'splogin_new',
            'access callback' => true,
        ),
        'admin/config/sp/login' => array(
            'title'            => 'Loginmodule',
            'description'      => 'Instellingen voor de loginmodule',
            'type'             => MENU_NORMAL_ITEM,
            'page callback'    => 'drupal_get_form',
            'page arguments'   => array('splogin_admin_form'),
            'access callback'  => 'user_access',
            'access arguments' => array('access administration pages'),
            'weight'           => 21,
        ),
    );
}

/**
 * Implements hook_enable.
 * Maakt indien nodig velden aan op het gebruikersprofiel die we vullen vanuit CiviCRM.
 */
function splogin_enable() {

    _splogin_create_field('field_contact_id', 'Registratienummer', 'number_integer');
    _splogin_create_field('field_first_name', 'Voornaam');
    _splogin_create_field('field_middle_name', 'Tussenvoegsel');
    _splogin_create_field('field_last_name', 'Achternaam');
    _splogin_create_field('field_initials', 'Voorletters');
    _splogin_create_field('field_phone_primary', 'Telefoon');
    _splogin_create_field('field_email_primary', 'E-mailadres');
    _splogin_create_field('field_afdeling', 'Afdeling');
}

/**
 * Maakt een veld aan indien het nog niet bestaat
 * @param string $name Naam
 * @param string $label Label
 */
function _splogin_create_field($name, $label, $type = 'text') {

    if(!field_info_field($name)) {
        field_create_field(array(
            'field_name' => $name,
            'type' => $type,
        ));

        field_create_instance(array(
           'field_name' => $name,
            'entity_type' => 'user',
            'label' => $label,
            'bundle' => 'user',
            'settings' => array(
                'user_register_form' => false,
            ),
        ));
    }
}

/**
 * Als gebruiker niet ingelogd is, formulier tonen om nieuwe gebruiker aan te maken
 * @return mixed Result
 */
function splogin_new() {
    if(user_is_logged_in())
        return drupal_goto('user');
    else
        return drupal_get_form('splogin_new_form');
}

/**
 * Formulier om nieuwe gebruikers aan te maken
 * @param mixed $form Form
 * @param mixed $form_state Form state
 * @return mixed Form
 */
function splogin_new_form($form, &$form_state) {

    if(!isset($form_state['stage']))
        $form_state['stage'] = 'start';

    switch ($form_state['stage']) {

        case 'start':

            $form['descr'] = array(
                '#markup' => t('<h3>Nieuw account</h3><p>Voer uw lidnummer of relatienummer, uw postcode en uw geboortedatum in om een account aan te maken.</p>'),
            );
            $form['civicrm_id'] = array(
                '#type'  => 'textfield',
                '#title' => t('Relatienummer'),
            );
            $form['postcode'] = array(
                '#type'  => 'textfield',
                '#title' => t('Postcode'),
            );
            $form['birthdate'] = array(
                '#type'          => 'date',
                '#title'         => t('Geboortedatum'),
                '#default_value' => array(
                    'day'   => 1,
                    'month' => 1,
                    'year'  => date('Y'),
                ),
            );
            $form['submit'] = array(
                '#type'  => 'submit',
                '#value' => t('Verder'),
            );

            break;

        case 'email':

            $form['descr'] = array(
                '#markup' => t('<h3>Nieuw account</h3><p>U bent bekend in ons systeem, maar we hebben nog geen e-mailadres van u opgeslagen. Vul hieronder uw e-mailadres in.</p>'),
            );
            $form['email'] = array(
                '#type'  => 'textfield',
                '#title' => t('E-mail'),
            );
            $form['submit'] = array(
                '#type'  => 'submit',
                '#value' => t('Account aanmaken'),
            );

            break;

        case 'complete':

            $form['descr'] = array(
                '#markup' => t('<h3>Nieuw account</h3><p>Bedankt voor het aanmaken van uw account. U ontvangt nu een e-mail met een eenmalige link. Als u deze aanklikt kunt u inloggen op SPnet en uw wachtwoord instellen.</p>'),
            );

            break;

    }

    return $form;
}

/**
 * Velden ophalen en parsen vanuit het formulier (aangeroepen in _validate en _submit)
 * @param mixed $form_state Form state
 * @return mixed Veldwaarden
 */
function splogin_new_get_fields(&$form_state) {

    if(isset($form_state['values']['civicrm_id']))
        $form_state['multistep_values']['civicrm_id'] = $form_state['values']['civicrm_id'];

    if(isset($form_state['values']['postcode'])) {
        $postcode = $form_state['values']['postcode'];
        if(strlen($postcode) == 6 && preg_match('/^[0-9]{4}[A-Za-z]{2}$/', $postcode))
            $postcode = substr($postcode, 0, 4) . ' ' . substr($postcode, 4);
        $postcode = strtoupper($postcode);
        $form_state['multistep_values']['postcode'] = $postcode;
    }

    if(isset($form_state['values']['birthdate'])) {
        $form_state['multistep_values']['birthdate'] = mktime(0, 0, 0, $form_state['values']['birthdate']['month'], $form_state['values']['birthdate']['day'], $form_state['values']['birthdate']['year']);
    }

    if(isset($form_state['values']['email'])) {
        $form_state['multistep_values']['email'] = $form_state['values']['email'];
    }

    return $form_state['multistep_values'];
}

/**
 * Validatie voor nieuwe registratie
 */
function splogin_new_form_validate($form, &$form_state) {

    $fields = splogin_new_get_fields($form_state);

    switch ($form_state['stage']) {

        case 'start':

            // Controleer invoer

            if(!$fields['civicrm_id'] || (int)$fields['civicrm_id'] < 1 || (int)$fields['civicrm_id'] > 1000000)
                form_set_error('civicrm_id', 'Ongeldig relatienummer');
            if(!$fields['postcode'])
                form_set_error('postcode', 'Geen postcode ingevuld.');
            if($fields['birthdate'] === false || $fields['birthdate'] > time() - 12 * 365 * 86400)
                form_set_error('birthdate', 'Ongeldige geboortedatum.');

            break;

        case 'email':

            // Controleer wachtwoord-invoer

            if(!$fields['email'])
                form_set_error('email', 'Vul een geldig e-mailadres in.');
            break;
    }
}

/**
 * Formulier nieuwe registratie verzenden
 */
function splogin_new_form_submit($form, &$form_state) {

    $fields = splogin_new_get_fields($form_state);
    list($contact, $status) = _splogin_new_checkuser($fields);
    $addAccount = false;

    switch ($form_state['stage']) {

        case 'start':

            // Controleer of gebruiker al bestaat
            // Zo ja -> account aanmaken (maar eventueel eerst om e-mailadres vragen)

            if(!$contact) {
                form_set_error('civicrm_id', $status);
            } else {

                if(!$contact['email']) {
                    $form_state['stage'] = 'email';
                    $form_state['rebuild'] = true;
                } else {
                    $addAccount = true;
                }
            }

            break;

        case 'email':

            // Gebruiker bestaat maar heeft geen geldig emailadres
            // -> Email updaten + account aanmaken

            if(!$contact) {
                form_set_error('civicrm_id', 'Er is een fout opgetreden: relatie niet gevonden.');
            } else {

                _splogin_new_setemail($contact, $fields['email']);
                $contact['email'] = $fields['email'];
                $addAccount = true;
            }

            break;
    }

    // Account aanmaken
    if($addAccount) {

        if(!$contact) {
            form_set_error('civicrm_id', 'Er is een fout opgetreden: relatie niet gevonden.');
        } else {

            // Gegevens kloppen -> Drupal-account aanmaken
            _splogin_new_createaccount($contact, $fields);

            // Melding 'klaar' tonen
            $form_state['stage'] = 'complete';
            $form_state['rebuild'] = true;
        }
    }
}

/**
 * Koppeling met CiviCRM: checken of er al een gebruiker bestaat
 * @param array $fields Field values
 * @return array Status en contact
 */
function _splogin_new_checkuser($fields) {

    if(!civicrm_initialize())
        return array(false, 'Kon niet verbinden met CiviCRM.');

    $user_check = civicrm_api3('UFMatch', 'Get', array(
        'contact_id' => $fields['civicrm_id'],
    ));

    if($user_check && $user_check['count'] > 0) {
        return array(false, 'Er bestaat al een gebruiker voor deze relatie.<br /><a href="' . url('user') . '">Log hier in.</a>');
    }

    // Haal contact op en controleer of de gegevens kloppen

    $contact = civicrm_api3('Contact', 'Get', array(
        'id'         => $fields['civicrm_id'],
        'sequential' => true,
    ));

    if(!$contact || $contact['count'] == 0) {
        return array(false, 'Geen relatie met deze gegevens gevonden.<br />Lukt het niet om een account aan te maken, stuur dan een e-mail naar <a href="mailto:administratie@sp.nl">administratie@sp.nl</a>.');
    }

    // drupal_set_message(print_r($contact, true));

    $contact = array_shift($contact['values']);
    if($contact['postal_code'] != $fields['postcode'] || ($contact['birth_date'] != null && strtotime($contact['birth_date']) != $fields['birthdate'])) {
        return array(false, 'Geen relatie met deze gegevens gevonden<br />Lukt het niet om een account aan te maken, stuur dan een e-mail naar <a href="mailto:administratie@sp.nl">administratie@sp.nl</a>.');
    }

    return array($contact, true);
}

/**
 * Update Drupal-uservelden met CiviCRM contactinfo
 * @param object $account Drupal user account
 * @return object Drupal user account
 */
function _splogin_update_profile(&$account) {

    if(!civicrm_initialize())
        return false;

    // Check op contact-record voor deze Drupal-user

    try {
        $match = civicrm_api3('UFMatch', 'getsingle', array(
            'uf_id' => $account->uid,
        ));
    } catch(CiviCRM_API3_Exception $e) {
        return false; // No match
    }

    // Haal contact op

    $custom_field_afdeling = variable_get('splogin_id_custom_afdeling');
    $custom_field_voorletters = variable_get('splogin_id_custom_voorletters');

    try {
        $contact = civicrm_api3('Contact', 'getsingle', array(
            'id'     => $match['contact_id'],
            'return' => 'id,first_name,middle_name,last_name,display_name,phone,email,' . $custom_field_voorletters . ',' . $custom_field_afdeling,
        ));
    } catch(CiviCRM_API3_Exception $e) {
        return false; // No match
    }

    // Zoek afdeling op indien bekend
    $afdeling = '';
    if(array_key_exists($custom_field_afdeling, $contact)) {
        try {
            $afdeling = civicrm_api3('Contact', 'getsingle', array(
                'id'     => $contact[ $custom_field_afdeling ],
                'return' => 'display_name',
            ))['display_name'];
        } catch(CiviCRM_API3_Exception $e) {
            $afdeling = '';
        }
    }

    $voorletters = '';
    if(array_key_exists($custom_field_voorletters, $contact))
        $voorletters = $contact[$custom_field_voorletters];

    // Update de gegevens

    $wrapped = entity_metadata_wrapper('user', $account); // Ah, is dat nodig?
    $wrapped->mail = $contact['email'];

    $wrapped->field_contact_id = $contact['id'];
    $wrapped->field_initials = $voorletters;
    $wrapped->field_first_name = $contact['first_name'];
    $wrapped->field_middle_name = $contact['middle_name'];
    $wrapped->field_last_name = $contact['last_name'];
    $wrapped->field_phone_primary = $contact['phone'];
    $wrapped->field_email_primary = $contact['email'];
    $wrapped->field_afdeling = $afdeling;

    user_save($account);
    return $account;
}

/**
 * Maak Drupal-account aan voor CiviCRM-contact
 * @param mixed $contact CiviCRM Contact
 * @param array $fields Veldwaarden
 * @return bool Success
 */
function _splogin_new_createaccount($contact, $fields) {

    // Hiermee schakelen we de automatische UFMatch uit! (geleerd van civicrm_entity)
    if(!civicrm_initialize(true))
        return false;
    $config = CRM_Core_Config::singleton();
    $config->inCiviCRM = true;

    // Voeg Drupal-account toe
    $password = base_convert(uniqid('pass', true), 10, 36);

    $account = user_save('', array(
        'name'   => $contact['contact_id'],
        'mail'   => $contact['email'],
        'pass'   => $password,
        'status' => 1,
        'init'   => 'email address',
        'roles'  => array(
            DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        ),
    ));
    $account->password = $password;
    $config->inCiviCRM = false;

    if(!$account) {
        drupal_set_message('Er kon geen gebruikersaccount voor u aangemaakt worden. Neem contact op met administratie@sp.nl.', 'error');
        return false;
    }

    // Handmatig UFMatch toevoegen
    $ufmatch = civicrm_api3('UFMatch', 'get', array(
        'contact_id' => $contact['contact_id'],
    ));
    if($ufmatch['count'] == 0) {
        $res = civicrm_api3('UFMatch', 'create', array(
            'uf_id'      => $account->uid,
            'uf_name'    => $contact['contact_id'],
            'contact_id' => $contact['contact_id'],
        ));
    }

    // E-mailbevestiging + loginlink versturen
    drupal_mail('user', 'register_no_approval_required', $contact['email'], null, array('account' => $account));

    return true;
}

/**
 * Contact heeft nog geen emailadres -> vragen en toevoegen aan CiviCRM
 * @param mixed $contact CiviCRM contact
 * @param string $email Email address
 * @return array API call result
 */
function _splogin_new_setemail($contact, $email) {

    return civicrm_api3('Contact', 'update', array(
        'contact_id'        => $contact['contact_id'],
        'api.email.replace' => array(
            'values' => array(array(
                'email'            => $email,
                'location_type_id' => 1,
                'is_primary'       => 1,
            )),
        ),
    ));
}

/**
 * Settings form voor loginmodule -> id's voor custom velden voor Profile2
 * @return mixed Form
 */
function splogin_admin_form() {

    $form = array();

    $form['splogin_id_custom_afdeling'] = array(
        '#type'          => 'textfield',
        '#title'         => 'Veldnaam afdelings-ID',
        '#default_value' => variable_get('splogin_id_custom_afdeling', 'custom_23'),
        '#required'      => true,
    );

    $form['splogin_id_custom_voorletters'] = array(
        '#type'          => 'textfield',
        '#title'         => 'Veldnaam voorletters',
        '#default_value' => variable_get('splogin_id_custom_voorletters', 'custom_111'),
        '#required'      => true,
    );

    return system_settings_form($form);
}
